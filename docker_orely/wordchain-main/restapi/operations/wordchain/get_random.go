// Code generated by go-swagger; DO NOT EDIT.

package wordchain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetRandomHandlerFunc turns a function with the right signature into a get random handler
type GetRandomHandlerFunc func(GetRandomParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRandomHandlerFunc) Handle(params GetRandomParams) middleware.Responder {
	return fn(params)
}

// GetRandomHandler interface for that can handle valid get random params
type GetRandomHandler interface {
	Handle(GetRandomParams) middleware.Responder
}

// NewGetRandom creates a new http.Handler for the get random operation
func NewGetRandom(ctx *middleware.Context, handler GetRandomHandler) *GetRandom {
	return &GetRandom{Context: ctx, Handler: handler}
}

/* GetRandom swagger:route POST /v1/random wordchain getRandom

Get a wordchain

Generate a wordchain

*/
type GetRandom struct {
	Context *middleware.Context
	Handler GetRandomHandler
}

func (o *GetRandom) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRandomParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
